version: 0.2

phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.ap-northeast-2.amazonaws.com
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.ap-northeast-2.amazonaws.com/sometimes-integration-api
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
      - echo Installing Node.js 16.x...
      - if command -v yum &> /dev/null; then
      -   curl -sL https://rpm.nodesource.com/setup_16.x | bash -
      -   yum install -y nodejs
      - elif command -v apt-get &> /dev/null; then
      -   curl -sL https://deb.nodesource.com/setup_16.x | bash -
      -   apt-get install -y nodejs
      - else
      -   echo "Neither yum nor apt-get found. Cannot install Node.js."
      -   exit 1
      - fi
      - node -v
      - echo Installing dependencies...
      - npm install -g pnpm@7.30.5
      - pnpm install

  build:
    commands:
      - echo Build started on `date`
      - echo Generating database migration scripts...
      - chmod +x scripts/db-migrate-auto.sh
      - ./scripts/db-migrate-auto.sh
      - echo Building the Docker image...
      - docker build -t $REPOSITORY_URI:latest .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG

  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo Writing image definitions file...
      - printf '[{"name":"sometimes-integration-api","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
      - cat imagedefinitions.json

artifacts:
  files:
    - imagedefinitions.json
    - appspec.yaml
    - drizzle/**/*
    - db-backups/**/*
  discard-paths: no

cache:
  paths:
    - 'node_modules/**/*'
    - '.pnpm-store/**/*'
